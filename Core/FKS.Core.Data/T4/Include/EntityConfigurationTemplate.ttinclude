<#+
// <copyright file="EntityConfigurationTemplate.tt" company="">
//  Copyright © . All Rights Reserved.
// </copyright>

public class EntityConfigurationTemplate : CSharpTemplate
{
    private T4ModelInfo _model;
        
    public EntityConfigurationTemplate(T4ModelInfo model)
    {
        _model = model;
    }

    /// <summary>
    /// 获取 生成的文件名，根据模型名定义
    /// </summary>
    public string FileName
    {
        get
        { 
            return string.Format("{0}Configuration.generated.cs", _model.Name);
        }
    }

	public override string TransformText()
	{
#>
// <auto-generated>
//     此代码由工具生成。
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
//		如存在本生成代码外的新需求，请在相同命名空间下创建同名分部类实现 <#= _model.Name #>ConfigurationAppend 分部方法。
// </auto-generated>

using System.Data.Entity;
using System;
using System.Data.Entity.ModelConfiguration;
using System.Data.Entity.ModelConfiguration.Configuration;

using FKS.Component.Data;
using FKS.Core.Models<#= _model.UseModuleDir ? string.Concat(".", _model.ModuleName) : string.Empty #>;


namespace FKS.Core.Data.Configurations<#= _model.UseModuleDir ? string.Concat(".", _model.ModuleName) : string.Empty #>
{
    /// <summary>
    /// 实体类-数据表映射——<#= _model.Description #>
    /// </summary>    
	internal partial class <#= _model.Name #>Configuration : EntityTypeConfiguration<<#= _model.Name #>>, IEntityMapper
    {
        /// <summary>
        /// 实体类-数据表映射构造函数——<#= _model.Description #>
        /// </summary>
        public <#= _model.Name #>Configuration()
        {
			<#= _model.Name #>ConfigurationAppend();
        }
        
        private DbModelBuilder modelBuilder{get;set;}
		
        /// <summary>
        /// 额外的数据映射
        /// </summary>
        partial void <#= _model.Name #>ConfigurationAppend();
		
        /// <summary>
        /// 将当前实体映射对象注册到当前数据访问上下文实体映射配置注册器中
        /// </summary>
        /// <param name="configurations">实体映射配置注册器</param>
        public void RegistTo(DbModelBuilder modelBuilder,ConfigurationRegistrar configurations)
        {
            configurations.Add(this);
        }
    }
}
<#+
        return this.GenerationEnvironment.ToString();
	}
}
#>
