// <auto-generated>
//     此代码由工具生成。
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
//	   如存在本生成代码外的新需求，请在相同命名空间下创建同名分部类进行实现。
// </auto-generated>


using System;
using System.Collections.Generic;
using System.ComponentModel.Composition;
using System.Linq;
using System.Web;
using System.Web.Mvc;
using CoolCode.Linq;
using FKS.Component.Tools;
using FKS.Site.Models;
using FKS.Site.Helper.Attributes;
using FKS.Site.Web.Controllers.BaseControllers;
using FKS.Core.Models.Hardware;
using FKS.Site.Helper.Logging;
using FKS.Core;
using FKS.Core.Models.Authority;

namespace FKS.Site.Web.Controllers.Controllers
{
    public class MonitorParams
    {
        public string tableName { get; set; }
        public DateTime StartTime { get; set; }
        public DateTime EndTime { get; set; }
        public int Interval { get; set; }
        public int page { get; set; }
        public int rows { get; set; }
    }

    [Export]
    public class DataAnalyseController : ManagerController<IDataAnalyseSiteContract, DataAnalyse>
    {
        [Import]
        protected IAuthoritySiteContract AuthoritySiteContract { get; set; }


        //static DateTime time = new DateTime(2014, 6, 11, 12, 01, 0);
        static DateTime time = DateTime.Now;

        #region View

        /// <summary>
        /// 实时数据
        /// </summary>
        /// <returns></returns>
        public ActionResult RealDataIndex()
        {
            return View();
        }
        /// <summary>
        /// 油烟监测
        /// </summary>
        /// <returns></returns>
        public ActionResult MonitorDataIndex()
        {
            return View();
        }
        /// <summary>
        /// 联动比
        /// </summary>
        /// <returns></returns>
        public ActionResult LinkageIndex()
        {
            return View();
        }
        /// <summary>
        /// 洁净度
        /// </summary>
        /// <returns></returns>
        public ActionResult CleanDataIndex()
        {
            return View();
        }

        /// <summary>
        /// 运行时间
        /// </summary>
        /// <returns></returns>
        public ActionResult RunningTimeIndex()
        {
            return View();
        }

        /// <summary>
        /// 异常设备
        /// </summary>
        /// <returns></returns>
        public ActionResult AbnormalDataIndex()
        {
            return View();
        }

        /// <summary>
        /// 维护时间超时设备
        /// </summary>
        /// <returns></returns>
        public ActionResult OverdueDataIndex()
        {
            return View();
        }

        /// <summary>
        /// 排放量
        /// </summary>
        /// <returns></returns>
        public ActionResult DischargeIndex()
        {
            return View();
        }

        /// <summary>
        /// 净化效率
        /// </summary>
        /// <returns></returns>
        public ActionResult PureRateIndex()
        {
            return View();
        }

        /// <summary>
        /// 油烟浓度
        /// </summary>
        /// <returns></returns>
        public ActionResult ConcentrationIndex()
        {
            return View();
        }

        #endregion

        public bool CheckAuthority()
        {
            var authority = this.AuthoritySiteContract.Authorities.Single<Authority>(m => m.Id == 1);
            return authority.HasAuthority;
        }

        #region R

        /// <summary>
        /// 查询数据
        /// </summary>
        /// <param name="Id"></param>
        /// <returns></returns>
        public ActionResult RealDataRow(string Id)
        {
            //var result = this.SiteContract.GetRealData(Id, DateTime.Now, 1);
            if (CheckAuthority() == false)
            {
                return Json("error", JsonRequestBehavior.DenyGet);
            }
            var result = this.SiteContract.GetRealData(Id, time, 1);
            time = time.AddMinutes(1);
            return Json(result, JsonRequestBehavior.AllowGet);
        }

        /// <summary>
        /// 查询数据
        /// </summary>
        /// <param name="param"></param>
        /// <returns></returns>
        public ActionResult MonitorDataRow(MonitorParams param)
        {
            if (CheckAuthority() == false)
            {
                return Json("error", JsonRequestBehavior.DenyGet);
            }

            TimeSpan ts = new TimeSpan();
            ts = param.EndTime - param.StartTime;
            double minutes = ts.TotalMinutes;
            if (minutes < param.rows)
            {
                param.Interval = 1;
            }
            else
            {
                param.Interval = (int)Math.Ceiling(minutes / param.rows);
            }

            var result = this.SiteContract.GetMonitorData(param.tableName, param.StartTime, param.EndTime, param.Interval);

            var datagriddata = new DataGridView<DataAnalyse>
            {
                total = result.Count,
                rows = result.Skip((param.page - 1) * param.rows).Take(param.rows).ToList(),
            };

            return Json(datagriddata, JsonRequestBehavior.AllowGet);
        }

        /// <summary>
        /// 查询数据
        /// </summary>
        /// <param name="param"></param>
        /// <returns></returns>
        public ActionResult LinkageDataRow(MonitorParams param)
        {
            if (CheckAuthority() == false)
            {
                return Json("error", JsonRequestBehavior.DenyGet);
            }

            var result = this.SiteContract.GetLinkageData(param.tableName, param.StartTime, param.EndTime);

            //var datagriddata = new DataGridView<DataAnalyse>
            //{
            //    total = result.Count,
            //    rows = result.Skip((param.page - 1) * param.rows).Take(param.rows).ToList(),
            //};

            return Json(result, JsonRequestBehavior.AllowGet);
        }

        /// <summary>
        /// 查询数据
        /// </summary>
        /// <param name="param"></param>
        /// <returns></returns>
        public ActionResult CleanDataRow(MonitorParams param)
        {
            if (CheckAuthority() == false)
            {
                return Json("error", JsonRequestBehavior.DenyGet);
            }

            int dayDiff = (param.EndTime - param.StartTime).Days;

            if (dayDiff <= 1)
            {
                param.Interval = 1;
            }
            else if (dayDiff <= 7)
            {
                param.Interval = 10;
            }
            else if (dayDiff <= 30)
            {
                param.Interval = 60;
            }
            else
            {
                param.Interval = 1440;
            }

            var result = this.SiteContract.GetCleanData(param.tableName, param.StartTime, param.EndTime, param.Interval);

            return Json(result, JsonRequestBehavior.AllowGet);
        }
        /// <summary>
        /// 查询运行时间数据
        /// </summary>
        /// <param name="param"></param>
        /// <returns></returns>
        public ActionResult RunningTimeDataRow(MonitorParams param)
        {
            if (CheckAuthority() == false)
            {
                return Json("error", JsonRequestBehavior.DenyGet);
            }
            var result = this.SiteContract.GetRunningTimeData(param.tableName, param.StartTime, param.EndTime);

            //var datagriddata = new DataGridView<DataAnalyse>
            //{
            //    total = result.Count,
            //    rows = result.Skip((param.page - 1) * param.rows).Take(param.rows).ToList(),
            //};

            return Json(result, JsonRequestBehavior.AllowGet);
        }

        /// <summary>
        /// 异常设备
        /// </summary>
        /// <returns></returns>
        public ActionResult AbnormalDataRow()
        {
            if (CheckAuthority() == false)
            {
                return Json("error", JsonRequestBehavior.DenyGet);
            }
            var result = this.SiteContract.GetAbnormalData();
            return Json(result, JsonRequestBehavior.AllowGet);
        }

        /// <summary>
        /// 维护时间超时设备
        /// </summary>
        /// <returns></returns>
        public ActionResult OverdueDataRow(string overdualType)
        {
            if (CheckAuthority() == false)
            {
                return Json("error", JsonRequestBehavior.DenyGet);
            }
            var result = this.SiteContract.GetOverdueData(overdualType);
            return Json(result, JsonRequestBehavior.AllowGet);
        }

        /// <summary>
        /// 查询排放量数据
        /// </summary>
        /// <param name="param"></param>
        /// <returns></returns>
        public ActionResult DischargeDataRow(MonitorParams param)
        {
            if (CheckAuthority() == false)
            {
                return Json("error", JsonRequestBehavior.DenyGet);
            }
            var result = this.SiteContract.GetDischarge(param.tableName, param.StartTime, param.EndTime);
            return Json(result, JsonRequestBehavior.AllowGet);
        }

        /// <summary>
        /// 查询净化效率数据
        /// </summary>
        /// <param name="param"></param>
        /// <returns></returns>
        public ActionResult PureRateDataRow(MonitorParams param)
        {
            if (CheckAuthority() == false)
            {
                return Json("error", JsonRequestBehavior.DenyGet);
            }
            var result = this.SiteContract.GetPureRate(param.tableName, param.StartTime, param.EndTime);
            return Json(result, JsonRequestBehavior.AllowGet);
        }

        /// <summary>
        /// 查询油烟浓度数据
        /// </summary>
        /// <param name="param"></param>
        /// <returns></returns>
        public ActionResult ConcentrationDataRow(MonitorParams param)
        {
            if (CheckAuthority() == false)
            {
                return Json("error", JsonRequestBehavior.DenyGet);
            }
            var result = this.SiteContract.GetConcentration(param.tableName, param.StartTime, param.EndTime);
            return Json(result, JsonRequestBehavior.AllowGet);
        }

        #endregion

        public ActionResult UpdateCleanTime(string CollectionCodes)
        {
            var result = this.SiteContract.UpdateCleanTime(CollectionCodes);
            return Json(result, JsonRequestBehavior.AllowGet);
        }
    }
}



