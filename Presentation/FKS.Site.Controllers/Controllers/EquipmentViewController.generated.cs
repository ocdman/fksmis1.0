// <auto-generated>
//     此代码由工具生成。
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
//	   如存在本生成代码外的新需求，请在相同命名空间下创建同名分部类进行实现。
// </auto-generated>


using System;
using System.Collections.Generic;
using System.ComponentModel.Composition;
using System.Linq;
using System.Web;
using System.Web.Mvc;
using CoolCode.Linq;
using FKS.Component.Tools;
using FKS.Site.Models;
using FKS.Site.Helper.Attributes;
using FKS.Site.Web.Controllers.BaseControllers;
using FKS.Core.Models.Hardware;
using FKS.Site.Helper.Logging;
using FKS.Core.Models.Parameters;

namespace FKS.Site.Web.Controllers.Controllers
{
    [Export]
    public partial class EquipmentViewController : ManagerController<IEquipmentSiteContract, EquipmentView>
    {
        protected IQueryBuilder<Equipment> ViewQueryBuilder { get; set; }
        private bool IsExist { get; set; }

        partial void SetQueryBuilder(Pagination pagination);
        partial void DoCheckExist(Equipment model, OperationResult res);

        [Import]
        protected IEquipManagerSiteContract EquipManagerSiteContract { get; set; }
        [Import]
        protected IParameterSetSiteContract ParameterSetSiteContract { get; set; }

        #region R

        /// <summary>
        /// 查询数据
        /// </summary>
        /// <param name="pagination"></param>
        /// <returns></returns>
        public ActionResult DataRowIndex(Pagination pagination)
        {
            int total = 0;
            List<PropertySortCondition> sortConditions = this.getPropertySortCondition(pagination);
            DataGridView<EquipmentView> dgvResult = new DataGridView<EquipmentView>();

            this.SetQueryBuilder(pagination);
            var memberViews = this.SiteContract.Equipments.Where(this.ViewQueryBuilder.Expression).Where<Equipment, int>(m => true, pagination.page, pagination.rows, out total, sortConditions.ToArray())
                .Select(m => new EquipmentView
                {
                    EquipCode = m.EquipCode,
                    CollectionCode = m.CollectionCode,
                    PropertyInfo = m.PropertyInfo,
                    PositionInfo = m.PositionInfo,
                    NickName = m.NickName,
                    Address = m.Address,
                    EquipCount = m.EquipCount,
                    TimeOut = m.TimeOut,
                    Interval = m.Interval,
                    YHX = m.YHX,
                    YHY = m.YHY,
                    Status = m.Status,
                    Content = m.Content,
                    ZTjhq = m.ZTjhq,
                    ZTfj = m.ZTfj,
                    ZTst = m.ZTst,
                    YouYanND = m.YouYanND,
                    YouYanWD = m.YouYanWD,
                    YouYanSD = m.YouYanSD,
                    LastTimeGet = m.LastTimeGet,
                    OpenTime = m.OpenTime,
                    CleanTime = m.CleanTime,
                    UserName = m.UserName
                });

            dgvResult.rows = memberViews.ToList();
            dgvResult.total = total;

            return Json(dgvResult, JsonRequestBehavior.AllowGet);
        }

        /// <summary>
        /// 查询数据
        /// 针对下次维护时间而言
        /// </summary>
        /// <param name="pagination"></param>
        /// <returns></returns>
        public ActionResult DataRowIndexForNextCleanTime(Pagination pagination)
        {
            int total = 0;
            List<PropertySortCondition> sortConditions = this.getPropertySortCondition(pagination);
            DataGridView<EquipmentView> dgvResult = new DataGridView<EquipmentView>();

            var paramModel = this.ParameterSetSiteContract.ParameterSets.Single<ParameterSet>(m => m.Id == 1);

            this.SetQueryBuilder(pagination);
            var memberViews = this.SiteContract.Equipments.Where(this.ViewQueryBuilder.Expression).Where<Equipment, int>(m => true, pagination.page, pagination.rows, out total, sortConditions.ToArray())
                .Select(m => new EquipmentView
                {
                    EquipCode = m.EquipCode,
                    CollectionCode = m.CollectionCode,
                    PropertyInfo = m.PropertyInfo,
                    PositionInfo = m.PositionInfo,
                    NickName = m.NickName,
                    Address = m.Address,
                    EquipCount = m.EquipCount,
                    TimeOut = m.TimeOut,
                    Interval = m.Interval,
                    YHX = m.YHX,
                    YHY = m.YHY,
                    Status = m.Status,
                    Content = m.Content,
                    ZTjhq = m.ZTjhq,
                    ZTfj = m.ZTfj,
                    ZTst = m.ZTst,
                    YouYanND = m.YouYanND,
                    YouYanWD = m.YouYanWD,
                    YouYanSD = m.YouYanSD,
                    LastTimeGet = m.LastTimeGet,
                    OpenTime = m.OpenTime,
                    CleanTime = m.CleanTime,
                    UserName = m.UserName
                });

            dgvResult.rows = memberViews.ToList();

            foreach (EquipmentView ev in dgvResult.rows)
            {
                if (ev.CleanTime != DateTime.Parse("1900-01-01") && ev.CleanTime != DateTime.Parse("1970-01-01"))
                {
                    ev.NextCleanTime = ev.CleanTime.AddDays(paramModel.MaintenanceBound);
                }
                else
                {
                    ev.NextCleanTime = DateTime.Parse("1900-01-01");
                }
            }

            dgvResult.total = total;

            return Json(dgvResult, JsonRequestBehavior.AllowGet);
        }

        /// <summary>
        /// 查询数据
        /// 针对两个探测器而言
        /// </summary>
        /// <param name="pagination"></param>
        /// <returns></returns>
        public ActionResult DataRowIndexForTwoEquipCounts(Pagination pagination)
        {
            int total = 0;
            List<PropertySortCondition> sortConditions = this.getPropertySortCondition(pagination);
            DataGridView<EquipmentView> dgvResult = new DataGridView<EquipmentView>();

            this.SetQueryBuilder(pagination);
            var memberViews = this.SiteContract.Equipments.Where(this.ViewQueryBuilder.Expression).Where<Equipment, int>(m => m.EquipCount == 2, pagination.page, pagination.rows, out total, sortConditions.ToArray())
                .Select(m => new EquipmentView
                {
                    EquipCode = m.EquipCode,
                    CollectionCode = m.CollectionCode,
                    PropertyInfo = m.PropertyInfo,
                    PositionInfo = m.PositionInfo,
                    NickName = m.NickName,
                    Address = m.Address,
                    EquipCount = m.EquipCount,
                    TimeOut = m.TimeOut,
                    Interval = m.Interval,
                    YHX = m.YHX,
                    YHY = m.YHY,
                    Status = m.Status,
                    Content = m.Content,
                    ZTjhq = m.ZTjhq,
                    ZTfj = m.ZTfj,
                    ZTst = m.ZTst,
                    YouYanND = m.YouYanND,
                    YouYanWD = m.YouYanWD,
                    YouYanSD = m.YouYanSD,
                    LastTimeGet = m.LastTimeGet,
                    OpenTime = m.OpenTime,
                    CleanTime = m.CleanTime,
                    UserName = m.UserName
                });

            dgvResult.rows = memberViews.ToList();
            dgvResult.total = total;

            return Json(dgvResult, JsonRequestBehavior.AllowGet);
        }

        #endregion

        #region Create

        /// <summary>
        /// 添加数据
        /// </summary>
        /// <param name="viewModel"></param>
        /// <returns></returns>
        [HttpPost]
        public override ActionResult Add(EquipmentView viewModel)
        {
            var result = this.doCheckViewModel(res =>
            {
                Equipment model = new Equipment
                {
                    AddDate = DateTime.Now,
                    EquipCode = viewModel.EquipCode,
                    CollectionCode = viewModel.CollectionCode,
                    PropertyInfo = viewModel.PropertyInfo,
                    PositionInfo = viewModel.PositionInfo,
                    NickName = viewModel.NickName,
                    Address = viewModel.Address,
                    EquipCount = viewModel.EquipCount,
                    TimeOut = viewModel.TimeOut,
                    Interval = viewModel.Interval,
                    YHX = viewModel.YHX,
                    YHY = viewModel.YHY,
                    Status = viewModel.Status,
                    FanAirFlow = viewModel.FanAirFlow,
                    FanPower = viewModel.FanPower,
                    Content = viewModel.Content,
                    OpenTime = new DateTime(1970, 1, 1, 0, 0, 0),
                    CleanTime = new DateTime(1970, 1, 1, 0, 0, 0),
                    UserName = viewModel.UserName,
                    PurifierAirFlow = viewModel.PurifierAirFlow,
                    Contacts = viewModel.Contacts,
                    ContactInfo = viewModel.ContactInfo,
                    ContractNo = viewModel.ContractNo,
                    ContractStartTime = viewModel.ContractStartTime
                };

                if (viewModel.Status == 1)
                {
                    model.OpenTime = DateTime.Now;
                    model.CleanTime = DateTime.Now;
                }

                this.DoCheckExist(model, res);
                if (res.ResultType == OperationResultType.Success)
                {
                    var count = this.SiteContract.Add(model);
                    if (count > 0)
                    {
                        // add by wbgong at 20140711 start
                        EquipManager equipManagerModel = new EquipManager
                        {
                            CollectionCode = viewModel.CollectionCode,
                            DetectorCount = viewModel.EquipCount,
                            DetectorNum1 = "0000",
                            DetectorID1 = "0000",
                            DetectorNum2 = "----",
                            DetectorID2 = "----"
                        };
                        if (viewModel.EquipCount == 2)
                        {
                            equipManagerModel.DetectorNum2 = "0000";
                            equipManagerModel.DetectorID2 = "0000";
                        }
                        var count1 = this.EquipManagerSiteContract.Add(equipManagerModel);
                        // add by wbgong at 20140711 end
                        if (count1 > 0)
                        {
                            res.ResultType = OperationResultType.Success;
                        }
                    }
                    else
                    {
                        res.ResultType = OperationResultType.Error;
                        res.Message = @"保存数据失败，请查看日志！";
                    }
                }
            });
            this.doSetLogInfo("添加用户:" + viewModel.NickName, result);

            return Json(result, JsonRequestBehavior.AllowGet);
        }

        #endregion

        #region Update

        /// <summary>
        /// 修改数据视图
        /// </summary>
        /// <param name="Id"></param>
        /// <returns></returns>
        public ActionResult Edit(string Id)
        {
            EquipmentView viewModel = null;

            var model = this.SiteContract.Equipments.Single<Equipment>(m => m.CollectionCode == Id);
            if (model != null)
            {
                viewModel = new EquipmentView
                {
                    EquipCode = model.EquipCode,
                    CollectionCode = model.CollectionCode,
                    PropertyInfo = model.PropertyInfo,
                    PositionInfo = model.PositionInfo,
                    NickName = model.NickName,
                    Address = model.Address,
                    EquipCount = model.EquipCount,
                    TimeOut = model.TimeOut,
                    Interval = model.Interval,
                    YHX = model.YHX,
                    YHY = model.YHY,
                    Status = model.Status,
                    FanAirFlow = model.FanAirFlow,
                    FanPower = model.FanPower,
                    Content = model.Content,
                    ZTjhq = model.ZTjhq,
                    ZTfj = model.ZTfj,
                    ZTst = model.ZTst,
                    YouYanND = model.YouYanND,
                    YouYanWD = model.YouYanWD,
                    YouYanSD = model.YouYanSD,
                    LastTimeGet = model.LastTimeGet,
                    OpenTime = model.OpenTime,
                    CleanTime = model.CleanTime,
                    UserName = model.UserName,
                    PurifierAirFlow = model.PurifierAirFlow,
                    Contacts = model.Contacts,
                    ContactInfo = model.ContactInfo,
                    ContractNo = model.ContractNo,
                    ContractStartTime = model.ContractStartTime
                };
            }

            this.doGetAjaxReturnInfo();
            return View(viewModel);
        }
        /// <summary>
        /// 修改数据保存
        /// </summary>
        /// <param name="viewModel"></param>
        /// <returns></returns>
        [HttpPost]
        public override ActionResult Edit(EquipmentView viewModel)
        {
            string nickName = string.Empty;
            var result = this.doCheckViewModel(res =>
            {
                var model = this.SiteContract.Equipments.Single<Equipment>(m => m.CollectionCode == viewModel.CollectionCode);
                if (model != null)
                {
                    model.EquipCode = viewModel.EquipCode;
                    model.CollectionCode = viewModel.CollectionCode;
                    model.PropertyInfo = viewModel.PropertyInfo;
                    model.PositionInfo = viewModel.PositionInfo;
                    model.NickName = viewModel.NickName;
                    model.Address = viewModel.Address;
                    model.EquipCount = viewModel.EquipCount;
                    model.TimeOut = viewModel.TimeOut;
                    model.Interval = viewModel.Interval;
                    model.YHX = viewModel.YHX;
                    model.YHY = viewModel.YHY;
                    model.Status = viewModel.Status;
                    model.FanAirFlow = viewModel.FanAirFlow;
                    model.FanPower = viewModel.FanPower;
                    model.Content = viewModel.Content;
                    model.UserName = viewModel.UserName;
                    model.PurifierAirFlow = viewModel.PurifierAirFlow;
                    model.Contacts = viewModel.Contacts;
                    model.ContactInfo = viewModel.ContactInfo;
                    model.ContractNo = viewModel.ContractNo;
                    model.ContractStartTime = viewModel.ContractStartTime;

                    if (viewModel.IsCleanChecked)
                    {
                        model.CleanTime = viewModel.CleanTime;
                    }

                    var count = this.SiteContract.Edit(model);
                    if (count >= 0)
                    {
                        // add by wbgong at 20140711 start
                        var equipManagerModel = this.EquipManagerSiteContract.EquipManagers.Single<EquipManager>(m => m.CollectionCode == viewModel.CollectionCode);

                        equipManagerModel.DetectorCount = viewModel.EquipCount;
                        if (viewModel.EquipCount == 1)
                        {
                            equipManagerModel.DetectorNum2 = "----";
                            equipManagerModel.DetectorID2 = "----";
                        }
                        var count1 = this.EquipManagerSiteContract.Edit(equipManagerModel);
                        // add by wbgong at 20140711 end
                        if (count1 > 0)
                        {
                            res.ResultType = OperationResultType.Success;
                        }
                    }
                    else
                    {
                        res.ResultType = OperationResultType.Error;
                        res.Message = @"保存数据失败，请查看日志！";
                    }
                }
                else
                {
                    res.ResultType = OperationResultType.Error;
                    res.Message = @"未查询到数据！";
                }
                nickName = viewModel.NickName;
            });
            this.doSetLogInfo(viewModel.IsCleanChecked ? "修改用户:" + nickName + ",更新清洗时间:" + viewModel.CleanTime : "修改用户:" + nickName, result);

            return Json(result, JsonRequestBehavior.AllowGet);
        }

        #endregion

        #region Delete

        /// <summary>
        /// 删除数据
        /// </summary>
        /// <param name="Id"></param>
        /// <returns></returns>
        public ActionResult Delete(string Id)
        {
            EquipmentView viewModel = null;

            var model = this.SiteContract.Equipments.Single<Equipment>(m => m.CollectionCode == Id);
            if (model != null)
            {
                viewModel = new EquipmentView
                {
                    EquipCode = model.EquipCode,
                    CollectionCode = model.CollectionCode,
                    PropertyInfo = model.PropertyInfo,
                    PositionInfo = model.PositionInfo,
                    NickName = model.NickName,
                    Address = model.Address,
                    EquipCount = model.EquipCount,
                    TimeOut = model.TimeOut,
                    Interval = model.Interval,
                    YHX = model.YHX,
                    YHY = model.YHY,
                    Status = model.Status,
                    FanAirFlow = model.FanAirFlow,
                    FanPower = model.FanPower,
                    Content = model.Content,
                    ZTjhq = model.ZTjhq,
                    ZTfj = model.ZTfj,
                    ZTst = model.ZTst,
                    YouYanND = model.YouYanND,
                    YouYanWD = model.YouYanWD,
                    YouYanSD = model.YouYanSD,
                    LastTimeGet = model.LastTimeGet,
                    OpenTime = model.OpenTime,
                    CleanTime = model.CleanTime,
                    UserName = model.UserName,
                    PurifierAirFlow = model.PurifierAirFlow,
                    Contacts = model.Contacts,
                    ContactInfo = model.ContactInfo,
                    ContractNo = model.ContractNo,
                    ContractStartTime = model.ContractStartTime
                };
            }

            this.doGetAjaxReturnInfo();
            return View(viewModel);
        }
        /// <summary>
        /// 删除数据保存
        /// </summary>
        /// <param name="viewModel"></param>
        /// <returns></returns>
        [HttpPost]
        [ActionName("DELETE")]
        public ActionResult DelConfirm(EquipmentView viewModel)
        {
            string nickName = string.Empty;
            //var result = this.doCheckViewModel(res =>
            //{
            var res = new OperationResult(OperationResultType.Success, string.Empty);
            var model = this.SiteContract.Equipments.Single<Equipment>(m => m.CollectionCode == viewModel.CollectionCode);
            if (model != null)
            {
                var count = this.SiteContract.Del(model);

                if (count > 0)
                {
                    // add by wbgong at 20140711 start
                    var equipManagerModel = this.EquipManagerSiteContract.EquipManagers.Single<EquipManager>(m => m.CollectionCode == viewModel.CollectionCode);

                    equipManagerModel.DetectorCount = viewModel.EquipCount;

                    var count1 = this.EquipManagerSiteContract.Del(equipManagerModel);
                    // add by wbgong at 20140711 end
                    if (count1 > 0)
                    {
                        res.ResultType = OperationResultType.Success;
                    }
                }
                else
                {
                    res.ResultType = OperationResultType.Error;
                    res.Message = @"保存数据失败，请查看日志！";
                }
            }
            else
            {
                res.ResultType = OperationResultType.Error;
                res.Message = @"未查询到数据！";
            }
            nickName = viewModel.NickName;
            //});
            this.doSetLogInfo("删除用户:" + nickName, res);

            return Json(res, JsonRequestBehavior.AllowGet);
        }

        #endregion
    }
}



