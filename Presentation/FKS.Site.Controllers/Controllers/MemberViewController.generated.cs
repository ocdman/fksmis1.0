// <auto-generated>
//     此代码由工具生成。
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
//	   如存在本生成代码外的新需求，请在相同命名空间下创建同名分部类进行实现。
// </auto-generated>


using System;
using System.Collections.Generic;
using System.ComponentModel.Composition;
using System.Linq;
using System.Web;
using System.Web.Mvc;
using CoolCode.Linq;
using FKS.Component.Tools;
using FKS.Site.Models;
using FKS.Site.Helper.Attributes;
using FKS.Site.Web.Controllers.BaseControllers;
using FKS.Core.Models.Account;
using FKS.Site.Helper.Logging;

namespace FKS.Site.Web.Controllers.Controllers
{
    [Export]
    public partial class MemberViewController : ManagerController<IAccountSiteContract, MemberView>
    {
        protected IQueryBuilder<Member> ViewQueryBuilder { get; set; }
        private bool IsExist { get; set; }

        partial void SetQueryBuilder(Pagination pagination);
        partial void DoCheckExist(Member model, OperationResult res);

        #region R

        /// <summary>
        /// 查询数据
        /// </summary>
        /// <param name="pagination"></param>
        /// <returns></returns>
        public ActionResult DataRowIndex(Pagination pagination)
        {
            int total = 0;
            List<PropertySortCondition> sortConditions = this.getPropertySortCondition(pagination);
            DataGridView<MemberView> dgvResult = new DataGridView<MemberView>();

            this.SetQueryBuilder(pagination);
            var memberViews = this.SiteContract.Members.Where(this.ViewQueryBuilder.Expression).Where<Member, long>(m => true, pagination.page, pagination.rows, out total, sortConditions.ToArray())
                .Select(m => new MemberView
                {
                    Id = m.Id,
                    UserName = m.UserName,
                    NickName = m.NickName,
                    Password = m.Password,
                    IsAdmin = m.IsAdmin,
                }).Where<MemberView>(m => m.UserName != "admin");

            dgvResult.rows = memberViews.ToList();
            dgvResult.total = total;

            return Json(dgvResult, JsonRequestBehavior.AllowGet);
        }

        #endregion

        #region Create

        /// <summary>
        /// 添加数据
        /// </summary>
        /// <param name="viewModel"></param>
        /// <returns></returns>
        [HttpPost]
        public override ActionResult Add(MemberView viewModel)
        {
            var result = this.doCheckViewModel(res =>
            {
                Member model = new Member
                {
                    AddDate = DateTime.Now,
                    UserName = viewModel.UserName,
                    NickName = viewModel.NickName,
                    Password = viewModel.Password,
                    IsAdmin = viewModel.IsAdmin,
                };
                this.DoCheckExist(model, res);
                if (res.ResultType == OperationResultType.Success)
                {
                    var count = this.SiteContract.Add(model);
                    if (count > 0)
                    {
                        res.ResultType = OperationResultType.Success;
                    }
                    else
                    {
                        res.ResultType = OperationResultType.Error;
                        res.Message = @"保存数据失败，请查看日志！";
                    }
                }
            });
            this.doSetLogInfo("添加操作员:" + viewModel.NickName, result);

            return Json(result, JsonRequestBehavior.AllowGet);
        }

        #endregion

        #region Update

        /// <summary>
        /// 修改数据视图
        /// </summary>
        /// <param name="Id"></param>
        /// <returns></returns>
        public ActionResult Edit(long Id)
        {
            MemberView viewModel = null;

            var model = this.SiteContract.Members.Single<Member>(m => m.Id == Id);
            if (model != null)
            {
                viewModel = new MemberView
                {
                    Id = model.Id,
                    UserName = model.UserName,
                    NickName = model.NickName,
                    Password = model.Password,
                    IsAdmin = model.IsAdmin,
                };
            }

            this.doGetAjaxReturnInfo();
            return View(viewModel);
        }
        /// <summary>
        /// 修改数据保存
        /// </summary>
        /// <param name="viewModel"></param>
        /// <returns></returns>
        [HttpPost]
        public override ActionResult Edit(MemberView viewModel)
        {
            var result = this.doCheckViewModel(res =>
            {
                var model = this.SiteContract.Members.Single<Member>(m => m.Id == viewModel.Id);
                if (model != null)
                {
                    model.NickName = viewModel.NickName;
                    model.IsAdmin = viewModel.IsAdmin;
                    model.Password = viewModel.Password;


                    var count = this.SiteContract.Edit(model);
                    if (count >= 0)
                    {
                        res.ResultType = OperationResultType.Success;
                    }
                    else
                    {
                        res.ResultType = OperationResultType.Error;
                        res.Message = @"保存数据失败，请查看日志！";
                    }
                }
                else
                {
                    res.ResultType = OperationResultType.Error;
                    res.Message = @"未查询到数据！";
                }
            });
            this.doSetLogInfo("修改操作员:" + viewModel.NickName, result);

            return Json(result, JsonRequestBehavior.AllowGet);
        }

        #endregion

        #region Delete

        /// <summary>
        /// 删除数据
        /// </summary>
        /// <param name="Id"></param>
        /// <returns></returns>
        public ActionResult Delete(long Id)
        {
            MemberView viewModel = null;

            var model = this.SiteContract.Members.Single<Member>(m => m.Id == Id);
            if (model != null)
            {
                viewModel = new MemberView
                {
                    Id = model.Id,
                    UserName = model.UserName,
                    NickName = model.NickName,
                    Password = model.Password,
                    IsAdmin = model.IsAdmin,
                };
            }

            this.doGetAjaxReturnInfo();
            return View(viewModel);
        }
        /// <summary>
        /// 删除数据保存
        /// </summary>
        /// <param name="viewModel"></param>
        /// <returns></returns>
        [HttpPost]
        [ActionName("DELETE")]
        public ActionResult DelConfirm(MemberView viewModel)
        {
            //var result = this.doCheckViewModel(res =>
            //{
            var res = new OperationResult(OperationResultType.Success, string.Empty);
            var model = this.SiteContract.Members.Single<Member>(m => m.Id == viewModel.Id);
            if (model != null)
            {
                var count = this.SiteContract.Del(model);

                if (count > 0)
                {
                    res.ResultType = OperationResultType.Success;
                }
                else
                {
                    res.ResultType = OperationResultType.Error;
                    res.Message = @"保存数据失败，请查看日志！";
                }
            }
            else
            {
                res.ResultType = OperationResultType.Error;
                res.Message = @"未查询到数据！";
            }
            //});
            this.doSetLogInfo("删除操作员:" + viewModel.NickName, res);

            return Json(res, JsonRequestBehavior.AllowGet);
        }

        #endregion
    }
}



